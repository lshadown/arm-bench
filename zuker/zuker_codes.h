void zuker_seq()
{
    int i,j,k,m;

#pragma scop
    for (i = N-1; i >= 0; i--){
        for (j = i+1; j < N; j++) {
            for (k = i+1; k < j; k++){
                for(m=k+1; m <j; m++){
                    if(k-i + j - m > 2 && k-i + j - m < 30)
                        V[i][j] = MIN(V[k][m] + EFL[i][j], V[i][j]);
                }
                W[i][j] += MIN ( MIN(W[i][k], W[k+1][j]), W[i][j]);
                if(k < j-1)
                    V[i][j] = MIN(W[i+1][k] + W[k+1][j-1], V[i][j]);
            }
            V[i][j] = MIN( MIN (V[i+1][j-1], EHF[i][j]), V[i][j]);
            W[i][j] = MIN( MIN ( MIN ( W[i+1][j], W[i][j-1]), V[i][j]), W[i][j]);
        }
    }
#pragma endscop

}


void zuker_dapt(){

    for (int w0 = max(-1, floord(-N + 2, 6)); w0 <= floord(N - 1, 6); w0 += 1) {
#pragma omp parallel for shared(w0)
        for (int h0 = max(w0 - (N + 5) / 6 + 1, -((N + 3) / 6)); h0 <= min(0, w0); h0 += 1) {
            for (int t0 = max(0, 2 * w0); t0 <= min(min(min(2 * w0 + 3, 2 * w0 - 2 * h0 + 1), (N - 1) / 3), 2 * h0 + (N + 1) / 3 + 1); t0 += 1) {
                for (int i1 = max(max(max(max(-N + 2, -6 * w0 + 6 * h0 - 4), 6 * h0), -6 * w0 + 6 * h0 + 3 * t0 - 5), -N + 3 * t0 + 1); i1 <= min(min(0, 6 * h0 + 5), -6 * w0 + 6 * h0 + 3 * t0 + 2); i1 += 1) {
                    for (int i2 = max(max(6 * w0 - 6 * h0, 3 * t0 - i1), -i1 + 1); i2 <= min(min(N - 1, 6 * w0 - 6 * h0 + 5), 3 * t0 - i1 + 2); i2 += 1) {
                        {
                            for (int i3 = -i1 + 1; i3 < i2; i3 += 1) {
                                for (int i5 = i3 + 1; i5 < min(i2, i1 + i2 + i3 - 2); i5 += 1) {
                                    V[-i1][i2] = (((V[i3][i5] + EFL[-i1][i2]) < V[-i1][i2]) ? (V[i3][i5] + EFL[-i1][i2]) : V[-i1][i2]);
                                }
                                if (i2 >= i3 + 2) {
                                    V[-i1][i2] = (((W[-i1 + 1][i3] + W[i3 + 1][i2 - 1]) < V[-i1][i2]) ? (W[-i1 + 1][i3] + W[i3 + 1][i2 - 1]) : V[-i1][i2]);
                                }
                                W[-i1][i2] += ((((W[-i1][i3] < W[i3 + 1][i2]) ? W[-i1][i3] : W[i3 + 1][i2]) < W[-i1][i2]) ? ((W[-i1][i3] < W[i3 + 1][i2]) ? W[-i1][i3] : W[i3 + 1][i2]) : W[-i1][i2]);
                            }
                            V[-i1][i2] = ((((V[-i1 + 1][i2 - 1] < EHF[-i1][i2]) ? V[-i1 + 1][i2 - 1] : EHF[-i1][i2]) < V[-i1][i2]) ? ((V[-i1 + 1][i2 - 1] < EHF[-i1][i2]) ? V[-i1 + 1][i2 - 1] : EHF[-i1][i2]) : V[-i1][i2]);
                        }
                        W[-i1][i2] = ((((((W[-i1 + 1][i2] < W[-i1][i2 - 1]) ? W[-i1 + 1][i2] : W[-i1][i2 - 1]) < V[-i1][i2]) ? ((W[-i1 + 1][i2] < W[-i1][i2 - 1]) ? W[-i1 + 1][i2] : W[-i1][i2 - 1]) : V[-i1][i2]) < W[-i1][i2]) ? ((((W[-i1 + 1][i2] < W[-i1][i2 - 1]) ? W[-i1 + 1][i2] : W[-i1][i2 - 1]) < V[-i1][i2]) ? ((W[-i1 + 1][i2] < W[-i1][i2 - 1]) ? W[-i1 + 1][i2] : W[-i1][i2 - 1]) : V[-i1][i2]) : W[-i1][i2]);
                    }
                }
            }
        }
    }

}

void zuker_traco(){

    int c1,c2,c3,c4,c5,c6,c7,c8,c9,c11,c10,c12,c13,c14,c15;
    for( c1 = 0; c1 <= floord(N - 2, 8); c1 += 1)
#pragma omp parallel for shared(c1,N) private(c2,c3,c4,c5,c6,c7,c8,c9,c11,c10,c12,c13,c14,c15) schedule(dynamic, 1)
            for( c3 = max(0, c1 - (N + 15) / 16 + 1); c3 <= c1 / 2; c3 += 1) {
                if (2 * c3 == c1)
                    for( c5 = 0; c5 <= min(floord(N - 4, 16), c1 / 2); c5 += 1) {
                        for( c7 = 0; c7 <= min(min(-c5 + (N - 4) / 16, (c1 / 2) - 1), (c1 / 2) - c5); c7 += 1)
                            for( c9 = max(-N + 8 * c1 + 2, -N + 16 * c5 + 16 * c7 + 4); c9 <= min(0, -N + 8 * c1 + 16); c9 += 1) {
                                for( c11 = max(8 * c1 - c9 + 1, 16 * c5 + 16 * c7 - c9 + 3); c11 <= min(N - 1, 8 * c1 - c9 + 3); c11 += 1)
                                    for( c15 = 16 * c5 + 16 * c7 - c9 + 2; c15 <= min(min(16 * c5 + 16 * c7 - c9 + 17, 16 * c5 + c11 - 2), c11 - 1); c15 += 1)
                                    {
                                        //printf("!!\n");
                                        V[(-c9)][c11] = MIN(V[(16*c5-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                        //  exit(0);
                                    }
                                if (c5 == 0)
                                    for( c11 = 8 * c1 - c9 + 4; c11 < N; c11 += 1)
                                        for( c15 = 16 * c7 - c9 + 2; c15 <= 16 * c7 - c9 + 17; c15 += 1)
                                        { //printf("!!\n");
                                            V[(-c9)][c11] = MIN(V[(-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                        }
                            }
                        for( c6 = max(1, (-c1 / 2) + c5 + 2); c6 <= 2; c6 += 1) {
                            if (c6 == 2) {
                                for( c9 = max(-N + 8 * c1 + 2, -N + 16 * c5 + 4); c9 <= min(0, -N + 8 * c1 + 16); c9 += 1)
                                    for( c11 = max(8 * c1 - c9 + 1, 16 * c5 - c9 + 3); c11 <= min(N - 1, 8 * c1 - c9 + 3); c11 += 1)
                                        for( c13 = 16 * c5 - c9 + 1; c13 <= min(16 * c5 - c9 + 16, c11 - 2); c13 += 1) {
                                            if (c9 + c13 >= 16 * c5 + 2)
                                                for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                    V[(-c9)][c11] = MIN(V[c13][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                            V[(-c9)][c11] = MIN(W[(-c9)+1][c13] + W[c13+1][c11-1], V[(-c9)][c11]);
                                        }
                            } else
                                for( c9 = -N + 8 * c1 + 2; c9 <= min(0, -N + 8 * c1 + 16); c9 += 1)
                                    for( c11 = 8 * c1 - c9 + 1; c11 <= min(N - 1, 8 * c1 - c9 + 2); c11 += 1)
                                        for( c13 = 16 * c5 - c9 + 1; c13 <= 16 * c5 - c9 + 16; c13 += 1)
                                        { //printf("!!\n");
                                            W[(-c9)][c11] = MIN ( MIN(W[(-c9)][c13], W[c13+1][c11]), W[(-c9)][c11]);
                                        }
                        }
                    }
                for( c4 = max(0, -c1 + 2 * c3 + 1); c4 <= 2; c4 += 1) {
                    if (c4 >= 1) {
                        if (2 * c3 == c1 && c4 == 2) {
                            for( c9 = -N + 8 * c1 + 2; c9 <= min(0, -N + 8 * c1 + 4); c9 += 1)
                                for( c11 = 8 * c1 - c9 + 1; c11 < N; c11 += 1) {
                                    if (c9 + c11 >= 8 * c1 + 2) {
                                        if (N + c9 == 8 * c1 + 4 && c11 + 1 == N) {
                                            for( c13 = N - 8 * c1 - 3; c13 < N - 1; c13 += 1)
                                                W[(N-8*c1-4)][(N-1)] = MIN ( MIN(W[(N-8*c1-4)][c13], W[c13+1][(N-1)]), W[(N-8*c1-4)][(N-1)]);
                                        } else if (N + c9 == 8 * c1 + 3 && c11 + 1 == N) {
                                            W[(N-8*c1-3)][(N-1)] = MIN ( MIN(W[(N-8*c1-3)][(N-2)], W[(N-2)+1][(N-1)]), W[(N-8*c1-3)][(N-1)]);
                                        } else
                                            W[(N-8*c1-4)][(N-2)] = MIN ( MIN(W[(N-8*c1-4)][(N-3)], W[(N-3)+1][(N-2)]), W[(N-8*c1-4)][(N-2)]);
                                    }
                                    W[(-c9)][c11] = MIN( MIN ( MIN ( W[(-c9)+1][c11], W[(-c9)][c11-1]), V[(-c9)][c11]), W[(-c9)][c11]);
                                }
                        } else if (c1 >= 2 * c3 + 1 && c4 == 2)
                            for( c11 = N - 16 * c1 + 32 * c3; c11 <= N - 16 * c1 + 32 * c3 + 15; c11 += 1) {
                                for( c13 = N - 16 * c1 + 32 * c3; c13 < c11; c13 += 1)
                                    W[(N-16*c1+16*c3-1)][c11] = MIN ( MIN(W[(N-16*c1+16*c3-1)][c13], W[c13+1][c11]), W[(N-16*c1+16*c3-1)][c11]);
                                W[(N-16*c1+16*c3-1)][c11] = MIN( MIN ( MIN ( W[(N-16*c1+16*c3-1)+1][c11], W[(N-16*c1+16*c3-1)][c11-1]), V[(N-16*c1+16*c3-1)][c11]), W[(N-16*c1+16*c3-1)][c11]);
                            }
                        for( c9 = max(-N + 16 * c3 + 3 * c4 - 1, -N + 16 * c1 - 16 * c3 + c4); c9 <= min(0, -N + 16 * c1 - 16 * c3 + 15 * c4 - 14); c9 += 1) {
                            if (c4 == 2)
                                for( c11 = 16 * c3 - c9 + 1; c11 <= 16 * c3 - c9 + 3; c11 += 1) {
                                    if (c9 + c11 >= 16 * c3 + 2) {
                                        if (c9 + c11 == 16 * c3 + 2) {
                                            W[(-c9)][(16*c3-c9+2)] = MIN ( MIN(W[(-c9)][(16*c3-c9+1)], W[(16*c3-c9+1)+1][(16*c3-c9+2)]), W[(-c9)][(16*c3-c9+2)]);
                                        } else if (N + 16 * c3 + c9 >= 16 * c1 + 3) {
                                            for( c13 = -c9 + 1; c13 <= 16 * c3 - c9 + 2; c13 += 1)
                                                W[(-c9)][(16*c3-c9+3)] = MIN ( MIN(W[(-c9)][c13], W[c13+1][(16*c3-c9+3)]), W[(-c9)][(16*c3-c9+3)]);
                                        } else
                                            for( c13 = N - 16 * c1 + 32 * c3 - 1; c13 <= N - 16 * c1 + 32 * c3; c13 += 1)
                                                W[(N-16*c1+16*c3-2)][(N-16*c1+32*c3+1)] = MIN ( MIN(W[(N-16*c1+16*c3-2)][c13], W[c13+1][(N-16*c1+32*c3+1)]), W[(N-16*c1+16*c3-2)][(N-16*c1+32*c3+1)]);
                                    }
                                    W[(-c9)][c11] = MIN( MIN ( MIN ( W[(-c9)+1][c11], W[(-c9)][c11-1]), V[(-c9)][c11]), W[(-c9)][c11]);
                                }
                            for( c11 = 16 * c3 + 3 * c4 - c9 - 2; c11 <= min(N - 1, 16 * c3 - c9 + 16); c11 += 1)
                                for( c12 = max(0, -N + 16 * c1 - 16 * c3 - c9 + 2); c12 <= min(2, N - 16 * c1 + 16 * c3 + c9); c12 += 1) {
                                    if (c12 >= 1) {
                                        if (c12 == 1) {
                                            V[(-c9)][c11] = MIN( MIN (V[(-c9)+1][c11-1], EHF[(-c9)][c11]), V[(-c9)][c11]);
                                        } else
                                            W[(-c9)][c11] = MIN( MIN ( MIN ( W[(-c9)+1][c11], W[(-c9)][c11-1]), V[(-c9)][c11]), W[(-c9)][c11]);
                                    } else if (N + 16 * c3 + c9 >= 16 * c1 + 3) {
                                        for( c13 = -c9 + 1; c13 < c11; c13 += 1)
                                            for( c14 = max(max(0, -c11 + c13 + 2), 5 * c3 - c9 - c13 - (-c3 + c9 + c11 + 2) / 3 + 4); c14 <= min(2, c11 - c13); c14 += 1) {
                                                if (c14 >= 1) {
                                                    if (c14 == 2) {
                                                        V[(-c9)][c11] = MIN(W[(-c9)+1][c13] + W[c13+1][c11-1], V[(-c9)][c11]);
                                                    } else
                                                        W[(-c9)][c11] = MIN ( MIN(W[(-c9)][c13], W[c13+1][c11]), W[(-c9)][c11]);
                                                } else if (c9 + c13 >= 2) {
                                                    for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                        V[(-c9)][c11] = MIN(V[c13][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                                } else
                                                    for( c15 = 16 * c3 - c9 + 5; c15 < c11 - 1; c15 += 1)
                                                        V[(-c9)][c11] = MIN(V[(-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                            }
                                    } else
                                        for( c13 = N - 16 * c1 + 32 * c3 - 1; c13 < c11; c13 += 1)
                                            for( c14 = max(max(0, -c11 + c13 + 2), -8 * c1 + 16 * c3 - c13 + (N + c13) / 2 + 1); c14 <= min(min(2, c11 - c13), -N + 16 * c1 - 32 * c3 + c13 + 2); c14 += 1) {
                                                if (c14 >= 1) {
                                                    if (c14 == 2) {
                                                        V[(N-16*c1+16*c3-2)][c11] = MIN(W[(N-16*c1+16*c3-2)+1][c13] + W[c13+1][c11-1], V[(N-16*c1+16*c3-2)][c11]);
                                                    } else
                                                        W[(N-16*c1+16*c3-2)][c11] = MIN ( MIN(W[(N-16*c1+16*c3-2)][c13], W[c13+1][c11]), W[(N-16*c1+16*c3-2)][c11]);
                                                } else
                                                    for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                        V[(N-16*c1+16*c3-2)][c11] = MIN(V[c13][c15] + EFL[(N-16*c1+16*c3-2)][c11], V[(N-16*c1+16*c3-2)][c11]);
                                            }
                                }
                        }
                        if (c4 == 1)
                            for( c9 = -N + 16 * c1 - 16 * c3 + 2; c9 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c9 += 1)
                                for( c11 = 16 * c3 - c9 + 1; c11 <= min(N - 1, 16 * c3 - c9 + 16); c11 += 1) {
                                    int c12 = c9 + c11 >= 16 * c3 + 4 ? 0 : 1;
                                    if (N + 16 * c3 + c9 >= 16 * c1 + 3)
                                        for( c15 = 16 * c3 - c9 + 2; c15 <= min(16 * c3 - c9 + 4, c11 - 2); c15 += 1)
                                            V[(-c9)][c11] = MIN(V[(-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                    if (c12 == 1) {
                                        V[(-c9)][c11] = MIN( MIN (V[(-c9)+1][c11-1], EHF[(-c9)][c11]), V[(-c9)][c11]);
                                    } else if (N + 16 * c3 + c9 == 16 * c1 + 2)
                                        for( c13 = N - 16 * c1 + 16 * c3 - 1; c13 <= N - 16 * c1 + 32 * c3; c13 += 1) {
                                            if (16 * c1 + c13 + 1 == N + 16 * c3) {
                                                for( c15 = N - 16 * c1 + 32 * c3; c15 < c11 - 1; c15 += 1)
                                                    V[(N-16*c1+16*c3-2)][c11] = MIN(V[(N-16*c1+16*c3-1)][c15] + EFL[(N-16*c1+16*c3-2)][c11], V[(N-16*c1+16*c3-2)][c11]);
                                            } else
                                                for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                    V[(N-16*c1+16*c3-2)][c11] = MIN(V[c13][c15] + EFL[(N-16*c1+16*c3-2)][c11], V[(N-16*c1+16*c3-2)][c11]);
                                            if (N + 32 * c3 >= 16 * c1 + c13 + 1)
                                                V[(N-16*c1+16*c3-2)][c11] = MIN(W[(N-16*c1+16*c3-2)+1][c13] + W[c13+1][c11-1], V[(N-16*c1+16*c3-2)][c11]);
                                        }
                                }
                    } else
                        for( c5 = 0; c5 <= c3; c5 += 1) {
                            for( c6 = 0; c6 <= min(1, c3 - c5); c6 += 1) {
                                if (c6 == 1) {
                                    for( c9 = -N + 16 * c1 - 16 * c3 + 1; c9 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c9 += 1) {
                                        if (N + 16 * c3 + c9 >= 16 * c1 + 3) {
                                            for( c11 = 16 * c3 - c9 + 1; c11 <= 16 * c3 - c9 + 2; c11 += 1)
                                                for( c13 = 16 * c5 - c9 + 1; c13 <= 16 * c5 - c9 + 16; c13 += 1)
                                                    W[(-c9)][c11] = MIN ( MIN(W[(-c9)][c13], W[c13+1][c11]), W[(-c9)][c11]);
                                        } else
                                            for( c11 = 16 * c3 - c9 + 1; c11 <= 16 * c3 - c9 + 16; c11 += 1)
                                                for( c13 = 16 * c5 - c9 + 1; c13 <= 16 * c5 - c9 + 16; c13 += 1)
                                                    W[(-c9)][c11] = MIN ( MIN(W[(-c9)][c13], W[c13+1][c11]), W[(-c9)][c11]);
                                    }
                                } else
                                    for( c7 = 0; c7 <= c3 - c5; c7 += 1) {
                                        for( c11 = max(max(N - 16 * c1 + 32 * c3, N - 16 * c1 + 16 * c3 + 16 * c5 + 16 * c7 + 2), N - 16 * c1 + 16 * c3 + 16 * c7 + 3); c11 <= N - 16 * c1 + 32 * c3 + 15; c11 += 1)
                                            for( c15 = N - 16 * c1 + 16 * c3 + 16 * c5 + 16 * c7 + 1; c15 <= min(min(N - 16 * c1 + 16 * c3 + 16 * c5 + 16 * c7 + 16, 16 * c5 + c11 - 2), c11 - 1); c15 += 1)
                                                V[(N-16*c1+16*c3-1)][c11] = MIN(V[(N-16*c1+16*c3+16*c5)][c15] + EFL[(N-16*c1+16*c3-1)][c11], V[(N-16*c1+16*c3-1)][c11]);
                                        if (c3 >= c7 + 1)
                                            for( c9 = -N + 16 * c1 - 16 * c3 + 2; c9 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c9 += 1) {
                                                for( c11 = max(16 * c3 - c9 + 1, 16 * c5 + 16 * c7 - c9 + 3); c11 <= 16 * c3 - c9 + 3; c11 += 1)
                                                    for( c15 = 16 * c5 + 16 * c7 - c9 + 2; c15 <= min(min(16 * c5 + 16 * c7 - c9 + 17, 16 * c5 + c11 - 2), c11 - 1); c15 += 1)
                                                        V[(-c9)][c11] = MIN(V[(16*c5-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                                if (c5 == 0)
                                                    for( c11 = 16 * c3 - c9 + 4; c11 <= 16 * c3 - c9 + 16; c11 += 1)
                                                        for( c15 = 16 * c7 - c9 + 2; c15 <= 16 * c7 - c9 + 17; c15 += 1)
                                                            V[(-c9)][c11] = MIN(V[(-c9+1)][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                            }
                                    }
                            }
                            for( c9 = -N + 16 * c1 - 16 * c3 + 1; c9 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c9 += 1) {
                                if (N + 16 * c3 + c9 >= 16 * c1 + 2) {
                                    for( c11 = max(16 * c3 - c9 + 1, 16 * c5 - c9 + 3); c11 <= 16 * c3 - c9 + 3; c11 += 1)
                                        for( c13 = 16 * c5 - c9 + 1; c13 <= min(16 * c5 - c9 + 16, c11 - 2); c13 += 1) {
                                            if (c9 + c13 >= 16 * c5 + 2)
                                                for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                    V[(-c9)][c11] = MIN(V[c13][c15] + EFL[(-c9)][c11], V[(-c9)][c11]);
                                            V[(-c9)][c11] = MIN(W[(-c9)+1][c13] + W[c13+1][c11-1], V[(-c9)][c11]);
                                        }
                                } else
                                    for( c11 = max(N - 16 * c1 + 32 * c3, N - 16 * c1 + 16 * c3 + 16 * c5 + 2); c11 <= N - 16 * c1 + 32 * c3 + 15; c11 += 1)
                                        for( c13 = N - 16 * c1 + 16 * c3 + 16 * c5; c13 <= min(N - 16 * c1 + 16 * c3 + 16 * c5 + 15, c11 - 2); c13 += 1) {

                                            if (c5 == 0 && c11 >= 16 * c3 + c13 + 2 && 16 * c1 + c13 >= N + 16 * c3 + 1) {
                                                for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                    V[(N-16*c1+16*c3-1)][c11] = MIN(V[c13][c15] + EFL[(N-16*c1+16*c3-1)][c11], V[(N-16*c1+16*c3-1)][c11]);
                                            } else if (16 * c1 + c13 >= N + 16 * c3 + 16 * c5 + 1 && 16 * c3 + c13 + 1 >= c11)
                                                for( c15 = c13 + 1; c15 < c11; c15 += 1)
                                                    V[(N-16*c1+16*c3-1)][c11] = MIN(V[c13][c15] + EFL[(N-16*c1+16*c3-1)][c11], V[(N-16*c1+16*c3-1)][c11]);
                                            if (16 * c3 + c13 + 2 >= c11) {
                                                V[(N-16*c1+16*c3-1)][c11] = MIN(W[(N-16*c1+16*c3-1)+1][c13] + W[c13+1][c11-1], V[(N-16*c1+16*c3-1)][c11]);
                                            } else
                                                V[(N-16*c1+16*c3-1)][c11] = MIN(W[(N-16*c1+16*c3-1)+1][c13] + W[c13+1][c11-1], V[(N-16*c1+16*c3-1)][c11]);
                                        }
                            }
                        }
                }
            }
}


void zuker_pluto() {
    int t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    int lb, ub, lbp, ubp, lb2, ub2;
    int lbv, ubv;
/* Start of CLooG code */
    if (N >= 2) {
        for (t2 = max(-1, ceild(-N - 13, 16)); t2 <= floord(N - 1, 16); t2++) {
            lbp = max(0, t2);
            ubp = min(floord(N - 1, 16), floord(16 * t2 + N + 13, 16));
#pragma omp parallel for private(lbv, ubv, t5, t6, t7, t8, t9, t10, t11, t12, t4) shared(t2)
            for (t4 = lbp; t4 <= ubp; t4++) {
                if ((t2 <= floord(16 * t4 - N + 2, 16)) && (t4 >= ceild(N - 13, 16))) {
                    V[(N - 2)][(N - 1)] = MIN(
                            MIN(V[(N - 2) + 1][(N - 1) - 1], EHF[(N - 2)][(N - 1)]),
                            V[(N - 2)][(N - 1)]);;
                    W[(N - 2)][(N - 1)] = MIN(
                            MIN(MIN(W[(N - 2) + 1][(N - 1)], W[(N - 2)][(N - 1) - 1]),
                                V[(N - 2)][(N - 1)]), W[(N - 2)][(N - 1)]);;
                }
                if ((t2 == -1) && (16 * t4 == N - 14)) {
                    if ((N + 2) % 16 == 0) {
                        V[(N - 2)][(N - 1)] = MIN(
                                MIN(V[(N - 2) + 1][(N - 1) - 1], EHF[(N - 2)][(N - 1)]),
                                V[(N - 2)][(N - 1)]);;
                        W[(N - 2)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 2) + 1][(N - 1)], W[(N - 2)][(N - 1) - 1]),
                                    V[(N - 2)][(N - 1)]), W[(N - 2)][(N - 1)]);;
                    }
                }
                if ((t2 == -1) && (16 * t4 == N - 15)) {
                    if ((N + 1) % 16 == 0) {
                        V[(N - 2)][(N - 1)] = MIN(
                                MIN(V[(N - 2) + 1][(N - 1) - 1], EHF[(N - 2)][(N - 1)]),
                                V[(N - 2)][(N - 1)]);;
                        W[(N - 2)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 2) + 1][(N - 1)], W[(N - 2)][(N - 1) - 1]),
                                    V[(N - 2)][(N - 1)]), W[(N - 2)][(N - 1)]);;
                    }
                }
                if ((t2 == -1) && (t4 <= floord(N - 16, 16))) {
                    V[(16 * t4 + 14)][(16 * t4 + 15)] = MIN(
                            MIN(V[(16 * t4 + 14) + 1][(16 * t4 + 15) - 1],
                                EHF[(16 * t4 + 14)][(16 * t4 + 15)]),
                            V[(16 * t4 + 14)][(16 * t4 + 15)]);;
                    W[(16 * t4 + 14)][(16 * t4 + 15)] = MIN(
                            MIN(MIN(W[(16 * t4 + 14) + 1][(16 * t4 + 15)],
                                    W[(16 * t4 + 14)][(16 * t4 + 15) - 1]),
                                V[(16 * t4 + 14)][(16 * t4 + 15)]),
                            W[(16 * t4 + 14)][(16 * t4 + 15)]);;
                }
                if ((N >= 3) && (t2 <= floord(16 * t4 - N + 3, 16)) &&
                    (t2 >= ceild(16 * t4 - N - 12, 16)) && (t4 <= floord(N - 2, 16)) &&
                    (t4 >= ceild(N - 14, 16))) {
                    V[(N - 3)][(N - 2)] = MIN(
                            MIN(V[(N - 3) + 1][(N - 2) - 1], EHF[(N - 3)][(N - 2)]),
                            V[(N - 3)][(N - 2)]);;
                    W[(N - 3)][(N - 2)] = MIN(
                            MIN(MIN(W[(N - 3) + 1][(N - 2)], W[(N - 3)][(N - 2) - 1]),
                                V[(N - 3)][(N - 2)]), W[(N - 3)][(N - 2)]);;
                    W[(N - 3)][(N - 1)] = MIN(MIN(W[(N - 3)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                              W[(N - 3)][(N - 1)]);;
                    V[(N - 3)][(N - 1)] = MIN(
                            MIN(V[(N - 3) + 1][(N - 1) - 1], EHF[(N - 3)][(N - 1)]),
                            V[(N - 3)][(N - 1)]);;
                    W[(N - 3)][(N - 1)] = MIN(
                            MIN(MIN(W[(N - 3) + 1][(N - 1)], W[(N - 3)][(N - 1) - 1]),
                                V[(N - 3)][(N - 1)]), W[(N - 3)][(N - 1)]);;
                }
                if ((t2 == 0) && (16 * t4 == N - 1)) {
                    if ((N + 15) % 16 == 0) {
                        W[(N - 3)][(N - 1)] = MIN(MIN(W[(N - 3)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                                  W[(N - 3)][(N - 1)]);;
                    }
                    if ((N + 15) % 16 == 0) {
                        V[(N - 3)][(N - 1)] = MIN(
                                MIN(V[(N - 3) + 1][(N - 1) - 1], EHF[(N - 3)][(N - 1)]),
                                V[(N - 3)][(N - 1)]);;
                        W[(N - 3)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 3) + 1][(N - 1)], W[(N - 3)][(N - 1) - 1]),
                                    V[(N - 3)][(N - 1)]), W[(N - 3)][(N - 1)]);;
                    }
                }
                if ((t2 == -1) && (16 * t4 == N - 15)) {
                    if ((N + 1) % 16 == 0) {
                        V[(N - 3)][(N - 2)] = MIN(
                                MIN(V[(N - 3) + 1][(N - 2) - 1], EHF[(N - 3)][(N - 2)]),
                                V[(N - 3)][(N - 2)]);;
                        W[(N - 3)][(N - 2)] = MIN(
                                MIN(MIN(W[(N - 3) + 1][(N - 2)], W[(N - 3)][(N - 2) - 1]),
                                    V[(N - 3)][(N - 2)]), W[(N - 3)][(N - 2)]);;
                    }
                    if ((N + 1) % 16 == 0) {
                        W[(N - 3)][(N - 1)] = MIN(MIN(W[(N - 3)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                                  W[(N - 3)][(N - 1)]);;
                    }
                    if ((N + 1) % 16 == 0) {
                        V[(N - 3)][(N - 1)] = MIN(
                                MIN(V[(N - 3) + 1][(N - 1) - 1], EHF[(N - 3)][(N - 1)]),
                                V[(N - 3)][(N - 1)]);;
                        W[(N - 3)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 3) + 1][(N - 1)], W[(N - 3)][(N - 1) - 1]),
                                    V[(N - 3)][(N - 1)]), W[(N - 3)][(N - 1)]);;
                    }
                }
                if ((t2 == -1) && (t4 <= floord(N - 16, 16))) {
                    V[(16 * t4 + 13)][(16 * t4 + 14)] = MIN(
                            MIN(V[(16 * t4 + 13) + 1][(16 * t4 + 14) - 1],
                                EHF[(16 * t4 + 13)][(16 * t4 + 14)]),
                            V[(16 * t4 + 13)][(16 * t4 + 14)]);;
                    W[(16 * t4 + 13)][(16 * t4 + 14)] = MIN(
                            MIN(MIN(W[(16 * t4 + 13) + 1][(16 * t4 + 14)],
                                    W[(16 * t4 + 13)][(16 * t4 + 14) - 1]),
                                V[(16 * t4 + 13)][(16 * t4 + 14)]),
                            W[(16 * t4 + 13)][(16 * t4 + 14)]);;
                    W[(16 * t4 + 13)][(16 * t4 + 15)] = MIN(MIN(W[(16 * t4 + 13)][(16 * t4 + 14)],
                                                                W[(16 * t4 + 14) + 1][(16 * t4 +
                                                                                       15)]),
                                                            W[(16 * t4 + 13)][(16 * t4 + 15)]);;
                    V[(16 * t4 + 13)][(16 * t4 + 15)] = MIN(
                            MIN(V[(16 * t4 + 13) + 1][(16 * t4 + 15) - 1],
                                EHF[(16 * t4 + 13)][(16 * t4 + 15)]),
                            V[(16 * t4 + 13)][(16 * t4 + 15)]);;
                    W[(16 * t4 + 13)][(16 * t4 + 15)] = MIN(
                            MIN(MIN(W[(16 * t4 + 13) + 1][(16 * t4 + 15)],
                                    W[(16 * t4 + 13)][(16 * t4 + 15) - 1]),
                                V[(16 * t4 + 13)][(16 * t4 + 15)]),
                            W[(16 * t4 + 13)][(16 * t4 + 15)]);;
                }
                if ((N >= 4) && (t2 <= floord(16 * t4 - N + 4, 16)) &&
                    (t2 >= ceild(16 * t4 - N - 11, 16)) && (t4 <= floord(N - 3, 16)) &&
                    (t4 >= ceild(N - 15, 16))) {
                    V[(N - 4)][(N - 3)] = MIN(
                            MIN(V[(N - 4) + 1][(N - 3) - 1], EHF[(N - 4)][(N - 3)]),
                            V[(N - 4)][(N - 3)]);;
                    W[(N - 4)][(N - 3)] = MIN(
                            MIN(MIN(W[(N - 4) + 1][(N - 3)], W[(N - 4)][(N - 3) - 1]),
                                V[(N - 4)][(N - 3)]), W[(N - 4)][(N - 3)]);;
                    W[(N - 4)][(N - 2)] = MIN(MIN(W[(N - 4)][(N - 3)], W[(N - 3) + 1][(N - 2)]),
                                              W[(N - 4)][(N - 2)]);;
                    V[(N - 4)][(N - 2)] = MIN(
                            MIN(V[(N - 4) + 1][(N - 2) - 1], EHF[(N - 4)][(N - 2)]),
                            V[(N - 4)][(N - 2)]);;
                    W[(N - 4)][(N - 2)] = MIN(
                            MIN(MIN(W[(N - 4) + 1][(N - 2)], W[(N - 4)][(N - 2) - 1]),
                                V[(N - 4)][(N - 2)]), W[(N - 4)][(N - 2)]);;
                    W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 3)], W[(N - 3) + 1][(N - 1)]),
                                              W[(N - 4)][(N - 1)]);;
                    V[(N - 4)][(N - 1)] = MIN(W[(N - 4) + 1][(N - 3)] + W[(N - 3) + 1][(N - 1) - 1],
                                              V[(N - 4)][(N - 1)]);;
                    W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                              W[(N - 4)][(N - 1)]);;
                    V[(N - 4)][(N - 1)] = MIN(
                            MIN(V[(N - 4) + 1][(N - 1) - 1], EHF[(N - 4)][(N - 1)]),
                            V[(N - 4)][(N - 1)]);;
                    W[(N - 4)][(N - 1)] = MIN(
                            MIN(MIN(W[(N - 4) + 1][(N - 1)], W[(N - 4)][(N - 1) - 1]),
                                V[(N - 4)][(N - 1)]), W[(N - 4)][(N - 1)]);;
                }
                if ((N >= 18) && (t2 == 0) && (16 * t4 == N - 2)) {
                    if ((N + 14) % 16 == 0) {
                        W[(N - 4)][(N - 2)] = MIN(MIN(W[(N - 4)][(N - 3)], W[(N - 3) + 1][(N - 2)]),
                                                  W[(N - 4)][(N - 2)]);;
                    }
                    if ((N + 14) % 16 == 0) {
                        V[(N - 4)][(N - 2)] = MIN(
                                MIN(V[(N - 4) + 1][(N - 2) - 1], EHF[(N - 4)][(N - 2)]),
                                V[(N - 4)][(N - 2)]);;
                        W[(N - 4)][(N - 2)] = MIN(
                                MIN(MIN(W[(N - 4) + 1][(N - 2)], W[(N - 4)][(N - 2) - 1]),
                                    V[(N - 4)][(N - 2)]), W[(N - 4)][(N - 2)]);;
                    }
                    if ((N + 14) % 16 == 0) {
                        W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 3)], W[(N - 3) + 1][(N - 1)]),
                                                  W[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 14) % 16 == 0) {
                        V[(N - 4)][(N - 1)] = MIN(
                                W[(N - 4) + 1][(N - 3)] + W[(N - 3) + 1][(N - 1) - 1],
                                V[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 14) % 16 == 0) {
                        W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                                  W[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 14) % 16 == 0) {
                        V[(N - 4)][(N - 1)] = MIN(
                                MIN(V[(N - 4) + 1][(N - 1) - 1], EHF[(N - 4)][(N - 1)]),
                                V[(N - 4)][(N - 1)]);;
                        W[(N - 4)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 4) + 1][(N - 1)], W[(N - 4)][(N - 1) - 1]),
                                    V[(N - 4)][(N - 1)]), W[(N - 4)][(N - 1)]);;
                    }
                }
                if ((t2 == 0) && (16 * t4 == N - 1)) {
                    if ((N + 15) % 16 == 0) {
                        W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 3)], W[(N - 3) + 1][(N - 1)]),
                                                  W[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 15) % 16 == 0) {
                        V[(N - 4)][(N - 1)] = MIN(
                                W[(N - 4) + 1][(N - 3)] + W[(N - 3) + 1][(N - 1) - 1],
                                V[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 15) % 16 == 0) {
                        W[(N - 4)][(N - 1)] = MIN(MIN(W[(N - 4)][(N - 2)], W[(N - 2) + 1][(N - 1)]),
                                                  W[(N - 4)][(N - 1)]);;
                    }
                    if ((N + 15) % 16 == 0) {
                        V[(N - 4)][(N - 1)] = MIN(
                                MIN(V[(N - 4) + 1][(N - 1) - 1], EHF[(N - 4)][(N - 1)]),
                                V[(N - 4)][(N - 1)]);;
                        W[(N - 4)][(N - 1)] = MIN(
                                MIN(MIN(W[(N - 4) + 1][(N - 1)], W[(N - 4)][(N - 1) - 1]),
                                    V[(N - 4)][(N - 1)]), W[(N - 4)][(N - 1)]);;
                    }
                }
                if ((t2 == -1) && (t4 <= floord(N - 16, 16))) {
                    V[(16 * t4 + 12)][(16 * t4 + 13)] = MIN(
                            MIN(V[(16 * t4 + 12) + 1][(16 * t4 + 13) - 1],
                                EHF[(16 * t4 + 12)][(16 * t4 + 13)]),
                            V[(16 * t4 + 12)][(16 * t4 + 13)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 13)] = MIN(
                            MIN(MIN(W[(16 * t4 + 12) + 1][(16 * t4 + 13)],
                                    W[(16 * t4 + 12)][(16 * t4 + 13) - 1]),
                                V[(16 * t4 + 12)][(16 * t4 + 13)]),
                            W[(16 * t4 + 12)][(16 * t4 + 13)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 14)] = MIN(MIN(W[(16 * t4 + 12)][(16 * t4 + 13)],
                                                                W[(16 * t4 + 13) + 1][(16 * t4 +
                                                                                       14)]),
                                                            W[(16 * t4 + 12)][(16 * t4 + 14)]);;
                    V[(16 * t4 + 12)][(16 * t4 + 14)] = MIN(
                            MIN(V[(16 * t4 + 12) + 1][(16 * t4 + 14) - 1],
                                EHF[(16 * t4 + 12)][(16 * t4 + 14)]),
                            V[(16 * t4 + 12)][(16 * t4 + 14)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 14)] = MIN(
                            MIN(MIN(W[(16 * t4 + 12) + 1][(16 * t4 + 14)],
                                    W[(16 * t4 + 12)][(16 * t4 + 14) - 1]),
                                V[(16 * t4 + 12)][(16 * t4 + 14)]),
                            W[(16 * t4 + 12)][(16 * t4 + 14)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 15)] = MIN(MIN(W[(16 * t4 + 12)][(16 * t4 + 13)],
                                                                W[(16 * t4 + 13) + 1][(16 * t4 +
                                                                                       15)]),
                                                            W[(16 * t4 + 12)][(16 * t4 + 15)]);;
                    V[(16 * t4 + 12)][(16 * t4 + 15)] = MIN(W[(16 * t4 + 12) + 1][(16 * t4 + 13)] +
                                                            W[(16 * t4 + 13) + 1][(16 * t4 + 15) -
                                                                                  1],
                                                            V[(16 * t4 + 12)][(16 * t4 + 15)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 15)] = MIN(MIN(W[(16 * t4 + 12)][(16 * t4 + 14)],
                                                                W[(16 * t4 + 14) + 1][(16 * t4 +
                                                                                       15)]),
                                                            W[(16 * t4 + 12)][(16 * t4 + 15)]);;
                    V[(16 * t4 + 12)][(16 * t4 + 15)] = MIN(
                            MIN(V[(16 * t4 + 12) + 1][(16 * t4 + 15) - 1],
                                EHF[(16 * t4 + 12)][(16 * t4 + 15)]),
                            V[(16 * t4 + 12)][(16 * t4 + 15)]);;
                    W[(16 * t4 + 12)][(16 * t4 + 15)] = MIN(
                            MIN(MIN(W[(16 * t4 + 12) + 1][(16 * t4 + 15)],
                                    W[(16 * t4 + 12)][(16 * t4 + 15) - 1]),
                                V[(16 * t4 + 12)][(16 * t4 + 15)]),
                            W[(16 * t4 + 12)][(16 * t4 + 15)]);;
                }
                for (t5 = max(max(-N + 5, 16 * t2 - 16 * t4), -16 * t4 - 11);
                     t5 <= min(min(0, -16 * t4 + 1), 16 * t2 - 16 * t4 + 15); t5++) {
                    V[-t5][(-t5 + 1)] = MIN(MIN(V[-t5 + 1][(-t5 + 1) - 1], EHF[-t5][(-t5 + 1)]),
                                            V[-t5][(-t5 + 1)]);;
                    W[-t5][(-t5 + 1)] = MIN(MIN(MIN(W[-t5 + 1][(-t5 + 1)], W[-t5][(-t5 + 1) - 1]),
                                                V[-t5][(-t5 + 1)]), W[-t5][(-t5 + 1)]);;
                    W[-t5][(-t5 + 2)] = MIN(MIN(W[-t5][(-t5 + 1)], W[(-t5 + 1) + 1][(-t5 + 2)]),
                                            W[-t5][(-t5 + 2)]);;
                    V[-t5][(-t5 + 2)] = MIN(MIN(V[-t5 + 1][(-t5 + 2) - 1], EHF[-t5][(-t5 + 2)]),
                                            V[-t5][(-t5 + 2)]);;
                    W[-t5][(-t5 + 2)] = MIN(MIN(MIN(W[-t5 + 1][(-t5 + 2)], W[-t5][(-t5 + 2) - 1]),
                                                V[-t5][(-t5 + 2)]), W[-t5][(-t5 + 2)]);;
                    W[-t5][(-t5 + 3)] = MIN(MIN(W[-t5][(-t5 + 1)], W[(-t5 + 1) + 1][(-t5 + 3)]),
                                            W[-t5][(-t5 + 3)]);;
                    V[-t5][(-t5 + 3)] = MIN(W[-t5 + 1][(-t5 + 1)] + W[(-t5 + 1) + 1][(-t5 + 3) - 1],
                                            V[-t5][(-t5 + 3)]);;
                    W[-t5][(-t5 + 3)] = MIN(MIN(W[-t5][(-t5 + 2)], W[(-t5 + 2) + 1][(-t5 + 3)]),
                                            W[-t5][(-t5 + 3)]);;
                    V[-t5][(-t5 + 3)] = MIN(MIN(V[-t5 + 1][(-t5 + 3) - 1], EHF[-t5][(-t5 + 3)]),
                                            V[-t5][(-t5 + 3)]);;
                    W[-t5][(-t5 + 3)] = MIN(MIN(MIN(W[-t5 + 1][(-t5 + 3)], W[-t5][(-t5 + 3) - 1]),
                                                V[-t5][(-t5 + 3)]), W[-t5][(-t5 + 3)]);;
                    for (t7 = -t5 + 4; t7 <= min(N - 1, 16 * t4 + 15); t7++) {
                        for (t9 = -t5 + 1; t9 <= t7 - 2; t9++) {
                            for (t11 = t9 + 1; t11 <= min(t7 - 1, t5 + t7 + t9 - 3); t11++) {
                                V[-t5][t7] = MIN(V[t9][t11] + EFL[-t5][t7], V[-t5][t7]);;
                            }
                            W[-t5][t7] = MIN(MIN(W[-t5][t9], W[t9 + 1][t7]), W[-t5][t7]);;
                            V[-t5][t7] = MIN(W[-t5 + 1][t9] + W[t9 + 1][t7 - 1], V[-t5][t7]);;
                        }
                        W[-t5][t7] = MIN(MIN(W[-t5][(t7 - 1)], W[(t7 - 1) + 1][t7]), W[-t5][t7]);;
                        V[-t5][t7] = MIN(MIN(V[-t5 + 1][t7 - 1], EHF[-t5][t7]), V[-t5][t7]);;
                        W[-t5][t7] = MIN(MIN(MIN(W[-t5 + 1][t7], W[-t5][t7 - 1]), V[-t5][t7]),
                                         W[-t5][t7]);;
                    }
                }
                if ((t2 == 0) && (t4 >= 1) && (t4 <= floord(N - 3, 16))) {
                    W[(16 * t4 - 2)][16 * t4] = MIN(
                            MIN(W[(16 * t4 - 2)][(16 * t4 - 1)], W[(16 * t4 - 1) + 1][16 * t4]),
                            W[(16 * t4 - 2)][16 * t4]);;
                    V[(16 * t4 - 2)][16 * t4] = MIN(
                            MIN(V[(16 * t4 - 2) + 1][16 * t4 - 1], EHF[(16 * t4 - 2)][16 * t4]),
                            V[(16 * t4 - 2)][16 * t4]);;
                    W[(16 * t4 - 2)][16 * t4] = MIN(
                            MIN(MIN(W[(16 * t4 - 2) + 1][16 * t4], W[(16 * t4 - 2)][16 * t4 - 1]),
                                V[(16 * t4 - 2)][16 * t4]), W[(16 * t4 - 2)][16 * t4]);;
                    W[(16 * t4 - 2)][(16 * t4 + 1)] = MIN(MIN(W[(16 * t4 - 2)][(16 * t4 - 1)],
                                                              W[(16 * t4 - 1) + 1][(16 * t4 + 1)]),
                                                          W[(16 * t4 - 2)][(16 * t4 + 1)]);;
                    V[(16 * t4 - 2)][(16 * t4 + 1)] = MIN(W[(16 * t4 - 2) + 1][(16 * t4 - 1)] +
                                                          W[(16 * t4 - 1) + 1][(16 * t4 + 1) - 1],
                                                          V[(16 * t4 - 2)][(16 * t4 + 1)]);;
                    W[(16 * t4 - 2)][(16 * t4 + 1)] = MIN(
                            MIN(W[(16 * t4 - 2)][16 * t4], W[16 * t4 + 1][(16 * t4 + 1)]),
                            W[(16 * t4 - 2)][(16 * t4 + 1)]);;
                    V[(16 * t4 - 2)][(16 * t4 + 1)] = MIN(
                            MIN(V[(16 * t4 - 2) + 1][(16 * t4 + 1) - 1],
                                EHF[(16 * t4 - 2)][(16 * t4 + 1)]),
                            V[(16 * t4 - 2)][(16 * t4 + 1)]);;
                    W[(16 * t4 - 2)][(16 * t4 + 1)] = MIN(
                            MIN(MIN(W[(16 * t4 - 2) + 1][(16 * t4 + 1)],
                                    W[(16 * t4 - 2)][(16 * t4 + 1) - 1]),
                                V[(16 * t4 - 2)][(16 * t4 + 1)]), W[(16 * t4 - 2)][(16 * t4 + 1)]);;
                    for (t7 = 16 * t4 + 2; t7 <= min(N - 1, 16 * t4 + 15); t7++) {
                        for (t9 = 16 * t4 - 1; t9 <= t7 - 2; t9++) {
                            for (t11 = t9 + 1; t11 <= min(t7 - 1, -16 * t4 + t7 + t9 - 1); t11++) {
                                V[(16 * t4 - 2)][t7] = MIN(V[t9][t11] + EFL[(16 * t4 - 2)][t7],
                                                           V[(16 * t4 - 2)][t7]);;
                            }
                            W[(16 * t4 - 2)][t7] = MIN(MIN(W[(16 * t4 - 2)][t9], W[t9 + 1][t7]),
                                                       W[(16 * t4 - 2)][t7]);;
                            V[(16 * t4 - 2)][t7] = MIN(W[(16 * t4 - 2) + 1][t9] + W[t9 + 1][t7 - 1],
                                                       V[(16 * t4 - 2)][t7]);;
                        }
                        W[(16 * t4 - 2)][t7] = MIN(
                                MIN(W[(16 * t4 - 2)][(t7 - 1)], W[(t7 - 1) + 1][t7]),
                                W[(16 * t4 - 2)][t7]);;
                        V[(16 * t4 - 2)][t7] = MIN(
                                MIN(V[(16 * t4 - 2) + 1][t7 - 1], EHF[(16 * t4 - 2)][t7]),
                                V[(16 * t4 - 2)][t7]);;
                        W[(16 * t4 - 2)][t7] = MIN(
                                MIN(MIN(W[(16 * t4 - 2) + 1][t7], W[(16 * t4 - 2)][t7 - 1]),
                                    V[(16 * t4 - 2)][t7]), W[(16 * t4 - 2)][t7]);;
                    }
                }
                if ((t2 == 0) && (t4 >= 1) && (t4 <= floord(N - 2, 16))) {
                    W[(16 * t4 - 3)][16 * t4] = MIN(
                            MIN(W[(16 * t4 - 3)][(16 * t4 - 2)], W[(16 * t4 - 2) + 1][16 * t4]),
                            W[(16 * t4 - 3)][16 * t4]);;
                    V[(16 * t4 - 3)][16 * t4] = MIN(
                            W[(16 * t4 - 3) + 1][(16 * t4 - 2)] + W[(16 * t4 - 2) + 1][16 * t4 - 1],
                            V[(16 * t4 - 3)][16 * t4]);;
                    W[(16 * t4 - 3)][16 * t4] = MIN(
                            MIN(W[(16 * t4 - 3)][(16 * t4 - 1)], W[(16 * t4 - 1) + 1][16 * t4]),
                            W[(16 * t4 - 3)][16 * t4]);;
                    V[(16 * t4 - 3)][16 * t4] = MIN(
                            MIN(V[(16 * t4 - 3) + 1][16 * t4 - 1], EHF[(16 * t4 - 3)][16 * t4]),
                            V[(16 * t4 - 3)][16 * t4]);;
                    W[(16 * t4 - 3)][16 * t4] = MIN(
                            MIN(MIN(W[(16 * t4 - 3) + 1][16 * t4], W[(16 * t4 - 3)][16 * t4 - 1]),
                                V[(16 * t4 - 3)][16 * t4]), W[(16 * t4 - 3)][16 * t4]);;
                    for (t7 = 16 * t4 + 1; t7 <= min(N - 1, 16 * t4 + 15); t7++) {
                        for (t9 = 16 * t4 - 2; t9 <= t7 - 2; t9++) {
                            for (t11 = t9 + 1; t11 <= min(t7 - 1, -16 * t4 + t7 + t9); t11++) {
                                V[(16 * t4 - 3)][t7] = MIN(V[t9][t11] + EFL[(16 * t4 - 3)][t7],
                                                           V[(16 * t4 - 3)][t7]);;
                            }
                            W[(16 * t4 - 3)][t7] = MIN(MIN(W[(16 * t4 - 3)][t9], W[t9 + 1][t7]),
                                                       W[(16 * t4 - 3)][t7]);;
                            V[(16 * t4 - 3)][t7] = MIN(W[(16 * t4 - 3) + 1][t9] + W[t9 + 1][t7 - 1],
                                                       V[(16 * t4 - 3)][t7]);;
                        }
                        W[(16 * t4 - 3)][t7] = MIN(
                                MIN(W[(16 * t4 - 3)][(t7 - 1)], W[(t7 - 1) + 1][t7]),
                                W[(16 * t4 - 3)][t7]);;
                        V[(16 * t4 - 3)][t7] = MIN(
                                MIN(V[(16 * t4 - 3) + 1][t7 - 1], EHF[(16 * t4 - 3)][t7]),
                                V[(16 * t4 - 3)][t7]);;
                        W[(16 * t4 - 3)][t7] = MIN(
                                MIN(MIN(W[(16 * t4 - 3) + 1][t7], W[(16 * t4 - 3)][t7 - 1]),
                                    V[(16 * t4 - 3)][t7]), W[(16 * t4 - 3)][t7]);;
                    }
                }
                for (t5 = max(16 * t2 - 16 * t4, -16 * t4 + 4);
                     t5 <= min(0, 16 * t2 - 16 * t4 + 15); t5++) {
                    for (t7 = 16 * t4; t7 <= min(N - 1, 16 * t4 + 15); t7++) {
                        for (t9 = -t5 + 1; t9 <= t7 - 2; t9++) {
                            for (t11 = t9 + 1; t11 <= min(t7 - 1, t5 + t7 + t9 - 3); t11++) {
                                V[-t5][t7] = MIN(V[t9][t11] + EFL[-t5][t7], V[-t5][t7]);;
                            }
                            W[-t5][t7] = MIN(MIN(W[-t5][t9], W[t9 + 1][t7]), W[-t5][t7]);;
                            V[-t5][t7] = MIN(W[-t5 + 1][t9] + W[t9 + 1][t7 - 1], V[-t5][t7]);;
                        }
                        W[-t5][t7] = MIN(MIN(W[-t5][(t7 - 1)], W[(t7 - 1) + 1][t7]), W[-t5][t7]);;
                        V[-t5][t7] = MIN(MIN(V[-t5 + 1][t7 - 1], EHF[-t5][t7]), V[-t5][t7]);;
                        W[-t5][t7] = MIN(MIN(MIN(W[-t5 + 1][t7], W[-t5][t7 - 1]), V[-t5][t7]),
                                         W[-t5][t7]);;
                    }
                }
            }
        }
    }
}

